NAME = minishell

MKDIR = mkdir -p
DEL = rm -rf

#flags
CC = cc
CFLAGS = -Wall -Werror -Wextra

DEPFLAGS = -MMD -MF

# folders
BUILDS = /builds

SRCS = /srcs

# objs
OBJS = $(addprefix $(BUILDS)/, $(FILES:.c=.o))

FILES = builtins.c \
		cd.c \
		echo.c \
		echo_utils.c \
		env.c \
		exit.c \
		export.c \
		pwd.c \
		unset.c \
		add_to_history.c \
		free_all_and_exit.c \
		executor.c \
		hash_free.c \
		hash_tab.c \
		lexer_easy_splitter.c \
		lexer_spacer.c \
		lexer_spacer_utils.c \
		parser.c \
		parser_reading_invalid.c \
		parser_redirects.c \
		parser_utils.c \
		parser_writing_invalid.c \
		redirect.c \
		redirect_utils.c \
		token_constructor.c \
		token_constructor_utils.c \
		token_expander.c \
		token_expander_utils.c

DEP = $(OBJS:.o=.d)

VPATH = Built_ins essentials executor Hash_table  Lexer parser  redirections Tokenizer

VPATH := $(SRCS) $(addprefix $(SRCS)/, $(VPATH))

LIBFTDIR = ./libs/libft/

LIBFT = $(LIBFTDIR)libft.a

HEADER = ./includes ./libs/libft/includes

HEADER := $(addprefix -I, $(HEADER))

$(BUILDS):
	$(MKDIR) $@

$(BUILDS)/%.o:%.c $(BUILDS)
	$(CC) $(CFLAGS) -c $(HEADER) $< -o $@ $(DEPFLAGS) $(@:.o=.d)

$(NAME): $(OBJS)
	@make -C $(LIBFTDIR)
	$(CC) $(CFLAGS) $(OBJS) $(HEADER)  -l$(LIBFT) -lreadline -o $(NAME)

all: $(NAME)

clean:
	$(DEL) $(BUILDS)
	@make clean -C $(LIBFTDIR)

fclean: clean
	$(DEL) ./minishell
	@make fclean -C $(LIBFTDIR)

re: fclean all

-include ${DEP}

.PHONY: all fclean clean valg gdb
#.DEFAULT_GOAL = duck